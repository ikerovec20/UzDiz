package ikerovec20_zadaca_1.App;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Pattern;

import ikerovec20_zadaca_1.App.TvrtkaSingleton;
import ikerovec20_zadaca_1.builderi.IKompozicijaBuilder;
import ikerovec20_zadaca_1.builderi.IPrugaBuilder;
import ikerovec20_zadaca_1.builderi.KompozicijaBuilder;
import ikerovec20_zadaca_1.builderi.PrugaBuilder;
import ikerovec20_zadaca_1.podaci.Kompozicija;
import ikerovec20_zadaca_1.podaci.Pruga;
import ikerovec20_zadaca_1.podaci.PruznaStanica;
import ikerovec20_zadaca_1.podaci.Vozilo;
import ikerovec20_zadaca_1.tvornice.KompozicijskoVoziloCreator;
import ikerovec20_zadaca_1.tvornice.PutnickoVoziloCreator;
import ikerovec20_zadaca_1.tvornice.VagonCreator;
import ikerovec20_zadaca_1.tvornice.VoziloCreator;

public class Konfiguracija {
	private int brGreski = 0;
	private int brGreskiDatoteka = 0;
	
	private static Konfiguracija instance;
	
	static {
		instance = new Konfiguracija();
	}
	
	private Konfiguracija() {}
	
	public static Konfiguracija getInstance() {
		return instance;
	}
	
	public void ucitajKonfiguraciju(String[] args) throws Exception {
		if (args.length != 6) {
			throw new Exception("Neispravan broj argumenata");
		}
		String stanice = "";
		String kompozicije = "";
		String vlakovi = "";
		for (int i = 0; i < args.length - 1; i += 2) {
			switch(args[i]) {
			case "--zs":
				stanice = args[i+1];
				break;
			
			case "--zps":
				vlakovi = args[i+1];
				break;
				
			case "--zk":
				kompozicije = args[i+1];
				break;
				
			default: 
				throw new Exception("Neispravan format parametara.");
			}
		}
		ucitajStanice(stanice);
		ucitajVlakove(vlakovi);
		ucitajKompozicije(kompozicije);
	}
	
	private BufferedReader ucitajCsvDatoteku(String datoteka) {
		FileReader citacDatoteke;
		BufferedReader citac;
		try {
			citacDatoteke = new FileReader(datoteka);
			citac = new BufferedReader(citacDatoteke);
			return citac;
		} catch (FileNotFoundException e) {
			System.out.println("Nije moguce ucitati datoteku: " + datoteka);
			brGreski++;
			return null;
		}
	}
	
	private boolean validirajKompoziciju(Kompozicija kompozicija) {
		
		boolean pogoni = true;
		int brPogona = 0;
		for (var zapis : kompozicija.prijevoznaSredstva.entrySet()) {
			if (zapis.getValue().matches("V") && pogoni) {
				pogoni = false;
			}
			else if (zapis.getValue().matches("P") && pogoni) {
				brPogona++;
			}
			else if (zapis.getValue().matches("V") && !pogoni) {
				continue;
			}
			else {
				return false;
			}
		}
		if (brPogona > 0) {
			return true;
		}
		else {
			return false;
		}
	}
	
	private void ucitajKompozicije(String datoteka) throws IOException {
		var citac = ucitajCsvDatoteku(datoteka);
		citac.readLine();
		brGreskiDatoteka = 0;
		
		int brReda = 1;
		String zadnjaOznaka = "";
		IKompozicijaBuilder builder = new KompozicijaBuilder();
		while(citac.ready()) {
			var linija = citac.readLine();
			var podaci = linija.split(";");
			if (podaci.length != 0 && podaci[0] != "#") {
				for (var podatak : podaci) {
					podatak = podatak.trim();
				}
				if (brReda == 1) {
					zadnjaOznaka = podaci[0];
				}
				if (podaci.length != 3) {
					ispisiGreskuReda(datoteka, brReda, "Nedostaju podaci u redu");
					continue;
				}
				
				if (!podaci[2].matches("P|V")) {
					ispisiGreskuReda(datoteka, brReda, "uloga nije ispravna");
					continue;
				}
				var oznaka = podaci[0];
				if (!oznaka.matches(zadnjaOznaka)) {
					var kompozicija = builder.konstruirajKompoziciju();
					if (!validirajKompoziciju(kompozicija)) {
						ispisiGreskuReda(datoteka, brReda, "Kompozicija nije validna");
					}
					TvrtkaSingleton.getInstance().sveKompozicije.put(oznaka, kompozicija);
					System.out.println(kompozicija);
					builder = new KompozicijaBuilder();
					Vozilo vlak = TvrtkaSingleton.getInstance().svaVozila.get(podaci[1]);
					if (vlak == null) {
						ispisiGreskuReda(datoteka, brReda, "Vlak u kompoziciji ne postoji");
					}
					else {
						builder.dodajVlak(vlak, podaci[2]);	
					}
				}
				else {
					Vozilo vlak = TvrtkaSingleton.getInstance().svaVozila.get(podaci[1]);
					if (vlak == null) {
						ispisiGreskuReda(datoteka, brReda, "Vlak u kompoziciji ne postoji");
					}
					else {
						builder.dodajVlak(vlak, podaci[2]);
					}
				}
				zadnjaOznaka = oznaka;
				brReda++;
			}
		}
		var kompozicija = builder.konstruirajKompoziciju();
		if (!validirajKompoziciju(kompozicija)) {
			ispisiGreskuReda(datoteka, brReda, "Kompozicija nije validna");
		}
		TvrtkaSingleton.getInstance().sveKompozicije.put(kompozicija.getOznaka(), kompozicija);
		System.out.println(kompozicija);
	}
	
	public void ispisiGresku(String opis) {
		brGreski++;
		
		StringBuilder poruka = new StringBuilder();
		poruka.append(opis).append(" |Br greski: ").append(brGreski);
	}
	
	private void ispisiGreskuReda(String datoteka, int red, String opis) {
		brGreski++;
		brGreskiDatoteka++;
		StringBuilder poruka = new StringBuilder();
		poruka.append(datoteka).append(": ").append("red ").append(red)
		.append(" - ").append(opis)
		.append(" |Br. greski: ").append(brGreski).append(" |Br. greski u datoteci: ").append(brGreskiDatoteka);
		System.out.println(poruka.toString());
	}
	
	private boolean provjeriIspravnostStanice(String[] podaci, String datoteka, int brReda) {
		boolean ispravno = true;
		if (!podaci[2].matches("kol\\.|staj\\.")) {
			ispisiGreskuReda(datoteka, brReda, "Vrsta stanice nije ispravna");
			ispravno = false;
		}
		if (!podaci[3].matches("O|Z")) {
			ispisiGreskuReda(datoteka, brReda, "Status stanice nije ispravan");
			ispravno = false;
		}
		if (!podaci[4].matches("DA|NE") || !podaci[5].matches("DA|NE")) {
			ispisiGreskuReda(datoteka, brReda, "Putnici ulaz/izlaz i/ili roba utovar/istovar nisu ispravni");
			ispravno = false;
		}
		if (!podaci[6].matches("L|R|M") || !podaci[12].matches("I|K|Z")) {
			ispisiGreskuReda(datoteka, brReda, "Kategorija i/ili status pruge nije ispravan");
			ispravno = false;
		}
		if (!podaci[7].matches("\\d") || !podaci[9].matches("\\d")) {
			ispisiGreskuReda(datoteka, brReda, "Broj perona ili broj kolosjeka stanice nije ispravan");
			ispravno = false;
		}
		if (!podaci[8].matches("K|E")) {
			ispisiGreskuReda(datoteka, brReda, "Vrsta pruge nije ispravna");
			ispravno = false;
		}
		if (!podaci[10].matches("^\\d*\\,?\\d*$") || !podaci[11].matches("^\\d*\\,?\\d*$")) {
			ispisiGreskuReda(datoteka, brReda, "DO po osovini i/ili DO po duznom m nije ispravan");
			ispravno = false;
		}
		if (!podaci[13].matches("\\d+")) {
			ispisiGreskuReda(datoteka, brReda, "Duzina pruge nije ispravna");
			ispravno = false;
		}
		return ispravno;
	}
	
	private void ucitajStanice(String datoteka) throws IOException {
		var citac = ucitajCsvDatoteku(datoteka);
		citac.readLine();
		brGreskiDatoteka = 0;
		
		int brReda = 1;
		IPrugaBuilder builder = new PrugaBuilder();
		PruznaStanica zadnjaStanica = null;
		String zadnjaOznaka = "";
		while(citac.ready()) {
			var linija = citac.readLine();
			var podaci = linija.split(";");
			if (podaci.length != 0 && podaci[0] != "#") {
				if (brReda == 1) {
					zadnjaOznaka = podaci[1];
				}
				if (podaci.length != 14) {
					System.out.println(datoteka + ": Nedostaju podaci u redu " + brReda);
					brGreski++;
					continue;
				}
				if (!provjeriIspravnostStanice(podaci, datoteka, brReda)) {
					brReda++;
					continue;
				}
				if (!zadnjaOznaka.matches(podaci[1])) {
					Pruga pruga = builder.build();
					TvrtkaSingleton.getInstance().svePruge.put(pruga.oznakaPruge, pruga);
					builder = new PrugaBuilder();
				
					String oznakaPruge = podaci[1];
					String kategorijaPruge = podaci[6];
					String vrstaPruge = podaci[8];
					String statusPruge = podaci[12];
					builder.setKategorijaPruge(kategorijaPruge).setOznakaPruge(oznakaPruge)
					.setVrstaPruge(vrstaPruge).setStatusPruge(statusPruge);
					PruznaStanica stanica = new PruznaStanica(podaci);
					builder.dodajStanicu(stanica);
					zadnjaStanica = stanica;
					zadnjaOznaka = podaci[1];
				}
				else {
					if (zadnjaStanica == null || !zadnjaStanica.stanica.matches(podaci[0])) {
						String oznakaPruge = podaci[1];
						String kategorijaPruge = podaci[6];
						String vrstaPruge = podaci[8];
						String statusPruge = podaci[12];
						int duzina = Integer.parseInt(podaci[13]);
						builder.setKategorijaPruge(kategorijaPruge).setOznakaPruge(oznakaPruge)
						.setVrstaPruge(vrstaPruge).setStatusPruge(statusPruge);
						PruznaStanica stanica = new PruznaStanica(podaci);
						builder.dodajStanicu(stanica);
						zadnjaStanica = stanica;
						zadnjaOznaka = podaci[1];
					}
					else {
						PruznaStanica stanica = zadnjaStanica.kloniraj();
						int brojKolosjeka = Integer.parseInt(podaci[9]);
						float dozvoljenoOpterecenjeOsovina = Float.parseFloat(podaci[10].replace(",", "."));
						float dozvoljenoOpterecenjeDuzniMetar = Float.parseFloat(podaci[11].replace(",", "."));
						int duzina = Integer.parseInt(podaci[13]);
						stanica.postaviPrugu(brojKolosjeka, dozvoljenoOpterecenjeOsovina, 
								dozvoljenoOpterecenjeDuzniMetar, duzina);
						builder.dodajStanicu(stanica);
						zadnjaStanica = stanica;
						zadnjaOznaka = podaci[1];
					}
				}
			}
			brReda++;
		}
		Pruga pruga = builder.build();
		TvrtkaSingleton.getInstance().svePruge.put(pruga.oznakaPruge, pruga);
		System.out.println(pruga);
	}
	
	private boolean provjeriIspravnostVlaka(String[] podaci, String datoteka, int brReda) {
		boolean ispravno = true;
		if (!podaci[4].matches("PSVPVK|PSVP|PSBP")) {
			ispisiGreskuReda(datoteka, brReda, "Namjena vlaka nije ispravna");
			ispravno = false;
		}
		if (!podaci[5].matches("N|P|TA|TK|TRS|TTS|TPS")) {
			ispisiGreskuReda(datoteka, brReda, "Vrsta prijevoza nije ispravna");
			ispravno = false;
		}
		if (!podaci[6].matches("D|E|N")) {
			ispisiGreskuReda(datoteka, brReda, "Vrsta pogona nije ispravna");
			ispravno = false;
		}
		if (!podaci[7].matches("\\d+")) {
			ispisiGreskuReda(datoteka, brReda, "Maks brzina nije ispravna");
			ispravno = false;
		}
		if (!podaci[8].matches("^\\d*\\,?\\d*")) {
			if (!podaci[8].matches("-1")) {
				ispisiGreskuReda(datoteka, brReda, "Maks snaga nije ispravna");
				ispravno = false;
			}
		}
		for (int i = 9; i < 14; i++) {
			if (!podaci[i].matches("\\d+")) {
				ispisiGreskuReda(datoteka, brReda, "Broj mjesta/kreveta/automobila/bicikala nije ispravan");
				ispravno = false;
			}
		}
		for (int i = 14; i < 17; i++) {
			if (!podaci[i].matches("^\\d*\\,?\\d*$")) {
				ispisiGreskuReda(datoteka, brReda, "Nosivost/povrsina/zapremina nije ispravna");
				ispravno = false;
			}
		}
		if (!podaci[17].matches("I|K")) {
			ispisiGreskuReda(datoteka, brReda, "Status nije ispravan");
			ispravno = false;
		}
		return ispravno;
	}
	
	private void ucitajVlakove(String datoteka) throws IOException {
		var citac = ucitajCsvDatoteku(datoteka);
		citac.readLine();
		brGreskiDatoteka = 0;
		
		int brReda = 1;
		while(citac.ready()) {
			var linija = citac.readLine();
			var podaci = linija.split(";");
			if (podaci.length != 0 && podaci[0] != "#") {
				for (var podatak : podaci) {
					podatak = podatak.trim();
				}
				if (podaci.length != 18) {
					ispisiGreskuReda(datoteka, brReda, "Nedostaju podaci u redu");
					brGreski++;
					continue;
				}
				if (!provjeriIspravnostVlaka(podaci, datoteka, brReda)) {
					brReda++;
					continue;
				}
				Vozilo vlak;
				VoziloCreator kompozicijskoCreator = new KompozicijskoVoziloCreator();
				VoziloCreator putnickoVoziloCreator = new PutnickoVoziloCreator();
				VoziloCreator teretnoVoziloCreator = new VagonCreator();
				if (podaci[5].startsWith("P")) {
					vlak = putnickoVoziloCreator.kreirajVozilo(podaci);
				}
				else if (podaci[5].matches("N")) {
					vlak = kompozicijskoCreator.kreirajVozilo(podaci);
					if (vlak.vrstaPogona.matches("N")) {
						ispisiGreskuReda(datoteka, brReda, "Kompozicijsko vozilo mora imati pogon");
						vlak = null;
					}
				}
				else {
					vlak = teretnoVoziloCreator.kreirajVozilo(podaci);
				}
				if (vlak != null) {
					TvrtkaSingleton.getInstance().svaVozila.put(vlak.oznaka, vlak);
					System.out.println(vlak);	
				}
			}
			brReda++;
		}
	}
}
