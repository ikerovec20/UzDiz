package ikerovec20_zadaca_1.tvornice;

import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;

import ikerovec20_zadaca_1.podaci.TeretniVagon;
import ikerovec20_zadaca_1.podaci.VagonZaAutomobile;
import ikerovec20_zadaca_1.podaci.VagonZaRobu;
import ikerovec20_zadaca_1.podaci.Vozilo;

public class VagonCreator extends VoziloCreator {

	@Override
	public Vozilo kreirajVozilo(String[] parametri) {
		var oznaka = parametri[0];
		var opis = parametri[1];
		var proizvodac = parametri[2];
		var godina = parametri[3];
		var namjena = parametri[4];
		var vrstaPogona = parametri[6];
		var maksBrzina = Integer.parseInt(parametri[7]);
		var status = parametri[17];
		float nosivost = 0;
		float povrsina = 0;
		NumberFormat nf = NumberFormat.getInstance(Locale.FRANCE);
		Number num;
		try {
			num = nf.parse(parametri[14]);
			nosivost = num.floatValue();
			num = nf.parse(parametri[15]);
			povrsina = num.floatValue();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		nosivost = Float.parseFloat(parametri[14]);
		povrsina = Float.parseFloat(parametri[15]);
		
		var vrstaPrijevoza = parametri[5];
		switch(vrstaPrijevoza) {
		case "TK":
			return new TeretniVagon(oznaka, opis, proizvodac, godina, vrstaPogona, namjena, maksBrzina, status, nosivost, povrsina);	
		case "TA":
			var brojAutomobila = Integer.parseInt(parametri[13]);
			return new VagonZaAutomobile(oznaka, opis, proizvodac, godina, vrstaPogona, namjena, maksBrzina, status, nosivost, povrsina, brojAutomobila);
		case "TRS":
		case "TTS":
			var zapremina = Float.parseFloat(parametri[16]);
			return new VagonZaRobu(oznaka, opis, proizvodac, godina, vrstaPogona, namjena, maksBrzina, status, nosivost, povrsina, zapremina);
		default: 
			System.out.println("Greska kod kreiranja vagona");//TODO poslati gresku
			return null;
		}
	}

}
